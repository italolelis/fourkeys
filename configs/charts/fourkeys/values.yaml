serviceAccount:
  # -- Specifies whether a ServiceAccount should be created
  create: true
  # -- The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name: null
  # -- Image pull secrets for the service account
  imagePullSecrets: []
  # -- Annotations for the service account
  annotations: {}
  # -- Set this toggle to false to opt out of automounting API credentials for the service account
  automountServiceAccountToken: false

rbac:
  create: true
  pspEnabled: true

pdb:
  enabled: true
  minAvailable: 1

networkPolicy:
  enabled: false
  # ingress:
  #   namespaceSelector: {}
  # alertmanager:
  #   port: null

autoscaling:
  app:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

app:
  enabled: true
  image:
    repository: "ghcr.io/italolelis/fourkeys"
    tag: latest
  imagePullSecrets: []
  replicaCount: 1
  labels: {}
  annotations: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  livenessProbe:
    httpGet:
      path: /live
      port: http-probe
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /ready
      port: http-probe
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  resources:
    requests:
      cpu: 20m
      memory: 30Mi
    # limits:
    #   cpu: 50m
    #   memory: 50Mi
  config:
    port: 8080
    logLevel: "info"
    githubSecret: ""
    opsgenieSecret: ""
    rest:
      readTimeout: "30s"
      writeTimeout: "30s"
      idleTimeout: "30s"
    messageBroker:
      singleTopic: false
      topicPrefix: "fourkeys_"

subscribers:
  github:
    enabled: true
    image:
      repository: "ghcr.io/italolelis/fourkeys"
      tag: subscriber-latest
    imagePullSecrets: []
    replicaCount: 1
    labels: {}
    annotations: {}
    nodeSelector: {}
    affinity: {}
    tolerations: []
    podAnnotations: {}
    podSecurityContext: {}
    securityContext: {}
    livenessProbe: {}
    readinessProbe: {}
    resources:
      requests:
        cpu: 20m
        memory: 30Mi
      # limits:
      #   cpu: 50m
      #   memory: 50Mi
    config:
      logLevel: "info"
      database:
        driver: "postgres" # you can choose between postgres or redshift
        dsn: ""
      messageBroker:
        driver: "kinesis" # you can choose between kinesis or awslambda
        streamName: "fourkeys_github"
        region: "eu-central-1"
        store:
          driver: "memory" # you can choose between memory, postgres, mysql, or redis. I do not recommend using the memory store in production.
          appName: "fourkeys-consumer-github"
          postgres:
            tableName: "kinesis_consumer"
            dsn: ""
          mysql:
            tableName: "kinesis_consumer"
            dsn: ""
          redis:
            address: ""
            db: ""
            username: ""
            password: ""

service:
  type: ClusterIP
  port: 80
  probePort: 9090

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - '/'
      backend:
        serviceName: chart-example.local
        servicePort: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

migrations:
  enabled: false
  # source: github://${{ secrets.MIGRATIONS_SOURCE_CRED }}@italolelis/fourkeys/configs/migrations/postgres
  # destination: redshift://${{ secrets.MIGRATIONS_DESTINATION_CRED }}@localhost:5432/fourkeys?sslmode=disable\

configMap:
  app:
    PORT: "8080"
    LOG_LEVEL: "info"
    REST_READ_TIMEOUT: 30s
    REST_WRITE_TIMEOUT: 30s
    REST_IDLE_TIMEOUT: 30s
    TOPIC_PREFIX: fourkeys_
  subscriber_github:
    LOG_LEVEL: "info"
    DATABASE_DRIVER: "postgres" # you can choose between postgres or redshift
    MESSAGE_BROKER_DRIVER: "kinesis"
    MESSAGE_BROKER_KINESIS_STREAM_NAME: "fourkeys_github"
    MESSAGE_BROKER_KINESIS_REGION: "eu-central-1"
    MESSAGE_BROKER_KINESIS_STORE_DRIVER: "memory" # you can choose between memory, postgres, mysql, or redis. I do not recommend using the memory store in production. 
    MESSAGE_BROKER_KINESIS_STORE_APP_NAME: "fourkeys-consumer-github"
    # MESSAGE_BROKER_KINESIS_STORE_POSTGRES_TABLE_NAME: "kinesis_consumer"
    # MESSAGE_BROKER_KINESIS_STORE_MYSQL_TABLE_NAME: "kinesis_consumer"
    # MESSAGE_BROKER_KINESIS_STORE_REDIS_ADDRESS: ""
    # MESSAGE_BROKER_KINESIS_STORE_REDIS_DB: ""

secrets:
  app:
    GITHUB_WEBHOOK_SECRET: ""
    OPSGENIE_WEBHOOK_SECRET: ""
  subscriber_github:
    DATABASE_DSN: ""
    # MESSAGE_BROKER_KINESIS_STORE_POSTGRES_DSN: ""
    # MESSAGE_BROKER_KINESIS_STORE_MYSQL_DSN: ""
    # MESSAGE_BROKER_KINESIS_STORE_REDIS_USERNAME: ""
    # MESSAGE_BROKER_KINESIS_STORE_REDIS_PASSWORD: ""

# Enable this if you're using https://github.com/coreos/prometheus-operator
serviceMonitor:
  enabled: false

# Rules for the Prometheus Operator
prometheusRule:
  # -- If enabled, a PrometheusRule resource for Prometheus Operator is created
  enabled: false
  # -- Alternative namespace for the PrometheusRule resource
  namespace: null
  # -- PrometheusRule annotations
  annotations: {}
  # -- Additional PrometheusRule labels
  labels: {}
  # -- Contents of Prometheus rules file
  groups: []
  # - name: fourkeys-rules
  #   rules:
  #     - record: job:loki_request_duration_seconds_bucket:sum_rate
  #       expr: sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, job)
  #     - record: job_route:loki_request_duration_seconds_bucket:sum_rate
  #       expr: sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, job, route)
  #     - record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate
  #       expr: sum(rate(container_cpu_usage_seconds_total[1m])) by (node, namespace, pod, container)
